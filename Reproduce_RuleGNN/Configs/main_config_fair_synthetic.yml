datasets:
 #  synthetic datasets
  - {name: "CSL", validation_folds: 5, experiment_config_file: "Reproduce_RuleGNN/Configs/config_CSL.yml", type: "generate_from_function", generate_function: csl_graphs}
  - {name: "EvenOddRings2_16", validation_folds: 10, experiment_config_file: "Reproduce_RuleGNN/Configs/config_EvenOddRings.yml", type: "generate_from_function", generate_function: even_odd_rings, generate_function_args: {data_size: 1200, ring_size: 16, difficulty: 2, count: False, seed: 764}}
  - {name: "EvenOddRingsCount16", validation_folds: 10, experiment_config_file: "Reproduce_RuleGNN/Configs/config_EvenOddRingsCount.yml", type: "generate_from_function", generate_function: even_odd_rings, generate_function_args: {data_size: 1200, ring_size: 16, count: True, seed: 764}}
  - {name: "LongRings100", validation_folds: 10, experiment_config_file: "Reproduce_RuleGNN/Configs/config_LongRings.yml", type: "generate_from_function", generate_function: long_rings, generate_function_args: {data_size: 1200, ring_size: 100, seed: 764}}
  - {name: "Snowflakes", validation_folds: 10, experiment_config_file: "Reproduce_RuleGNN/Configs/config_Snowflakes.yml", type: "generate_from_function", generate_function: snowflakes, generate_function_args: {smallest_snowflake: 3, largest_snowflake: 12, flakes_per_size: 100, seed: 764, generation_type: 'binary'}}

paths:
  # all the paths are relative to the PYTHONPATH path, can be also defined dataset-wise in the experiment_config_file
  data:
    "Reproduce_RuleGNN/Data/SyntheticDatasets/"
  properties:
    "Reproduce_RuleGNN/Data/Properties/" # Precomputed properties will be loaded from this folder
  labels:
    "Reproduce_RuleGNN/Data/Labels/" # Path to the folder containing the labels
  splits:
    "Reproduce_RuleGNN/Data/Splits/" # Path to the folder containing the data splits
  results:
    "Reproduce_RuleGNN/Results/" # Results will be saved in this folder

# network options
# bias: Turn on or off the bias in all layers
bias: True

# convolution_grad: Turn on or off learning for the convolutional layers
convolution_grad: True

# aggregation_grad: Turn on or off learning for the aggregation layer
aggregation_grad: True

# activation: activation function for the convolutional layers
activation: 'tanh'

# output_activation: activation function for the output layer
output_activation: 'tanh'

# rule_occurrence_threshold: threshold for the rule occurrence, determines how often a rule has to be present to be used in the network
# -type: [graph, total], graph: the rule has to be present in a graph, total: the rule has to be present in the whole dataset
# -threshold: the threshold for the rule occurrence at least this many times
rule_occurrence_threshold: { type: 'graph', threshold: 1 }

weight_initialization: { convolution: { type: 'lower_upper' },
                         convolution_bias: { type: 'constant', value: 0.0 },
                         aggregation: { type: 'lower_upper' },
                         aggregation_bias: { type: 'constant', value: 0.0 }}

# input_features: determine how the input features should be transformed, the following options show some examples
#  - {name: constant, value: 1.0}, use a constant value as input feature
#  - {name: node_labels, transformation: normalize}, use node labels and normalize them between -1 and 1
#  - {name: node_labels, transformation: normalize_positive}, use node labels and normalize them between 0 and 1
#  - {name: node_labels, transformation: unit_circle, features_as_channels: True}, use node labels mapped to the 2D unit circle, use features as channels
#  - {name: node_labels, transformation: one_hot, features_as_channels: True}, use node labels and transform them to one-hot encoding
#  - {name: node_features, features_as_channels: True}, use node features as input, use features as channels
#  - {name: all, features_as_channels: True}, use node labels and node features as input, use features as channels
input_features: { name: node_labels, transformation: normalize }

# num_workers: number of workers used
num_workers: 30