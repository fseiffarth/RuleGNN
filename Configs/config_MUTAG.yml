paths:
  data:
    "../../Data/GraphData/DS_all/" # Path to the folder containing the graph data
  properties:
    "../../Data/GraphData/Properties/" # Precomputed properties will be loaded from this folder
  labels:
    "Data/Labels/" # Path to the folder containing the labels
  results:
    "../../RESULTS/RuleGNN/TEST/" # Results will be saved in this folder
  splits:
    "Data/Splits/" # Path to the folder containing the data splits
device:
  cpu
mode:
  experiments # if debug printing and plotting options are enabled, for the experiments mode should be 'experiments'
batch_size:
  - 64
learning_rate:
  - 0.05
epochs:
  - 500
scheduler:
  False
dropout:
  - 0.0
optimizer:
  - Adam
loss:
  - CrossEntropyLoss
early_stopping:
  enabled:
    False
  patience:
    25
networks:
  # wl models
  #- - {layer_type: combined, sub_labels: [{layer_type: wl, wl_iterations: 2, max_node_labels: 500}, {layer_type: primary}], id: 0, max_node_labels: 1000, distances: [1,2,3,4,5,6,7,8,9,10]}
  #  - {layer_type: simple_cycles, max_cycle_length: 10}
  #- - { layer_type: wl, wl_iterations: 2, max_node_labels: 500, properties: {name: distances, values: [ 1,2,3, 4, 5, 6]} }
  #  - { layer_type: simple_cycles, max_cycle_length: 10 }
  #- - { layer_type: wl, wl_iterations: 2, max_node_labels: 500, properties: { name: circle_distances, values: [ 5,6,7,9,10,11,13,14,15,17,18,19,21,22,23,25,26,27 ] } }
  #  - { layer_type: simple_cycles, max_cycle_length: 10 }
  - - { layer_type: wl, wl_iterations: 2, max_node_labels: 500, properties: { name: edge_label_distances, values: [[1, 1, [0, 0, 0, 1]], [1, 1, [0, 0, 1]], [1, 1, [0,
  1]], [1, 1, [1]], [2, 1, [0, 0, 2]], [2, 1, [0, 1, 0, 1]], [2, 1, [0, 1, 1]], [2,
  1, [0, 2]], [2, 1, [1, 1]], [2, 1, [2]], [3, 1, [0, 1, 2]], [3, 1, [0, 2, 1]], [3,
  1, [0, 3]], [3, 1, [1, 1, 0, 1]], [3, 1, [1, 1, 1]], [3, 1, [1, 2]], [3, 1, [2,
  1]], [3, 1, [3]], [3, 2, [0, 3, 3]], [3, 2, [0, 4, 2]], [3, 2, [0, 6]], [3, 2, [1,
  4, 1]], [3, 2, [1, 5]], [3, 2, [2, 4]], [3, 2, [3, 3]], [3, 2, [6]], [4, 1, [0,
  2, 2]], [4, 1, [0, 3, 1]], [4, 1, [0, 4]], [4, 1, [1, 2, 1]], [4, 1, [1, 3]], [4,
  1, [2, 1, 0, 1]], [4, 1, [2, 1, 1]], [4, 1, [2, 2]], [4, 1, [3, 1]], [4, 1, [4]],
  [4, 2, [0, 3, 5]], [4, 2, [0, 4, 4]], [4, 2, [0, 5, 3]], [4, 2, [0, 6, 2]], [4,
  2, [1, 6, 1]], [4, 2, [3, 4, 1]], [4, 2, [3, 5]], [4, 2, [4, 4]], [4, 2, [5, 3]],
  [4, 2, [6, 2]], [4, 2, [8]], [5, 1, [0, 2, 3]], [5, 1, [0, 3, 2]], [5, 1, [0, 4,
  1]], [5, 1, [0, 5]], [5, 1, [1, 2, 2]], [5, 1, [1, 3, 1]], [5, 1, [1, 4]], [5, 1,
  [2, 2, 0, 1]], [5, 1, [2, 2, 1]], [5, 1, [2, 3]], [5, 1, [3, 1, 1]], [5, 1, [3,
  2]], [5, 1, [4, 1]], [5, 1, [5]], [5, 2, [0, 5, 5]], [5, 2, [0, 6, 4]], [5, 2, [0,
  7, 3]], [5, 2, [0, 8, 2]], [5, 2, [3, 6, 1]], [5, 2, [4, 6]], [5, 2, [5, 4, 1]],
  [5, 2, [5, 5]], [5, 2, [6, 2, 0, 2]], [5, 2, [6, 2, 2]], [5, 2, [6, 4]], [5, 2,
  [7, 3]], [5, 2, [8, 2]], [5, 2, [10]], [5, 3, [6, 9]], [5, 3, [8, 5, 2]], [5, 3,
  [8, 6, 1]], [5, 3, [8, 7]], [5, 3, [9, 6]], [5, 3, [10, 5]], [5, 3, [11, 4]], [5,
  3, [12, 3]], [5, 3, [15]], [6, 1, [0, 3, 3]], [6, 1, [0, 4, 2]], [6, 1, [0, 5, 1]],
  [6, 1, [1, 3, 2]], [6, 1, [1, 4, 1]], [6, 1, [1, 5]], [6, 1, [2, 2, 2]], [6, 1,
  [2, 3, 0, 1]], [6, 1, [2, 3, 1]], [6, 1, [2, 4]], [6, 1, [3, 2, 1]], [6, 1, [3,
  3]], [6, 1, [4, 1, 1]], [6, 1, [4, 2]], [6, 1, [5, 1]], [6, 1, [6]], [6, 2, [0,
  5, 7]], [6, 2, [0, 6, 6]], [6, 2, [0, 7, 5]], [6, 2, [0, 8, 4]], [6, 2, [0, 9, 3]],
  [6, 2, [0, 10, 2]], [6, 2, [5, 6, 1]], [6, 2, [5, 7]], [6, 2, [6, 4, 0, 2]], [6,
  2, [6, 4, 2]], [6, 2, [6, 6]], [6, 2, [7, 4, 1]], [6, 2, [7, 5]], [6, 2, [8, 2,
  2]], [6, 2, [8, 4]], [6, 2, [10, 2]], [6, 2, [12]], [6, 3, [8, 9, 1]], [6, 3, [9,
  9]], [6, 3, [10, 8]], [6, 3, [11, 5, 2]], [6, 3, [11, 6, 1]], [6, 3, [11, 7]], [6,
  3, [12, 6]], [6, 3, [13, 5]], [6, 3, [15, 3]], [6, 3, [18]]] } }
    - { layer_type: simple_cycles, max_cycle_length: 6}
  #- - { layer_type: wl, wl_iterations: 2, max_node_labels: 500, properties: { name: distances, values: [1,2,3,4,5,6] } }
  #  - { layer_type: wl, wl_iterations: 2, max_node_labels: 500 }

use_features: # if True uses normlized node labels as input features, if False uses 1-vector as input features
  True
use_attributes: # if True uses node attributes instead of node labels
  False
random_variation: # if True adds random variation to the input features
  False
load_splits: # if True loads precomputed data splits (use False only for new datasets)
  True

# data options
balance_training:
  False

# Additional options for analysis only possible in debug mode
additional_options:
  draw: # draw the accuracy and loss during training
    True
  save_weights: # save the weights of the model
    False
  save_prediction_values:
    True
  plot_graphs: # Plot all graphs in the dataset
    False
  print_results: # Print accuracy and loss in the console
    True


prune:
  enabled:
    False
  epochs: # prune after this many epochs
    25
  percentage: # number of total weights pruned at the end of training per layer (0.1 means 10% of the weights will be pruned)
    - 0.999
    - 0.5

precision:
  double

best_model:
  True
save_last:
  True
